const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const express = require("express");
const cors = require("cors");

// Telegram bot token obtained from BotFather
const token = "6740114531:AAHWjIeJnETdyOOPaDwe2v5L3gko_FR3kYo";

const app = express();

app.use(express.json());
app.use(cors());

// Server API endpoint for handling orders
const serverApiUrl = "YOUR_SERVER_API_URL";
const webAppUrl = "https://magnificent-speculoos-ca08a4.netlify.app";
// Cake options with descriptions and picture links
const cakes = [
  {
    name: "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –õ–∞–∑—É—Ä—å",
    description: "–ú–Ω–æ–≥–æ –∫—Ä–µ–º–∞ –∏ —à–æ–∫–æ–ª–∞–¥–∞!!!",
    price: 25000,
    pictureLink:
      "https://unsplash.com/photos/white-cake-with-chocolate-syrup-on-white-ceramic-plate-vdx5hPQhXFk",
  },
  {
    name: "–õ–∏–º–æ–Ω–Ω—ã–π –õ–∞–∑—É—Ä—å",
    description: "–õ–∏–º–æ–Ω –∏ –±–∏—Å–∫–≤–∏—Ç!!!",
    price: 20000,
    pictureLink:
      "https://unsplash.com/photos/a-three-tiered-cake-with-figs-on-top-of-it-4on47p0-bk4",
  },
  {
    name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–æ—Ä–∫–æ–≤–Ω—ã–π",
    description: "–ü–æ–ª–µ–∑–Ω—ã–π –∏ —Å—ã—Ç–Ω—ã–π!!!",
    price: 12000,
    pictureLink:
      "https://unsplash.com/photos/sliced-chocolate-cake-beside-fork-on-plate-P_l1bJQpQF0",
  },
  {
    name: "–ß–µ—Ä–Ω–æ—Å–ª–∏–≤ –∏ –∞–ø–µ–ª—å—Å–∏–Ω",
    description: "–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç",
    price: 8000,
    pictureLink:
      "https://unsplash.com/photos/icing-covered-cake-beside-cupcakes-3962cSRPwOo",
  },
  // Add more cake options as needed
];

// User data store (simulating a simple personal cabinet)
const userData = {};

// Create a new bot instance
const bot = new TelegramBot(token, { polling: true });

// Command to start the bot

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "/start") {
    await bot.sendMessage(chatId, "–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É", {
      reply_markup: {
        keyboard: [
          [{ text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app: { url: webAppUrl + "/form" } }],
        ],
      },
    });

    await bot.sendMessage(
      chatId,
      "–ó–∞—Ö–æ–¥–∏ –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", web_app: { url: webAppUrl } }],
          ],
        },
      }
    );
  }

  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg?.web_app_data?.data);
      console.log(data);
      await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!");
      await bot.sendMessage(chatId, "–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞: " + data?.country);
      await bot.sendMessage(chatId, "–í–∞—à–∞ —É–ª–∏—Ü–∞: " + data?.street);

      setTimeout(async () => {
        await bot.sendMessage(chatId, "–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
      }, 3000);
    } catch (e) {
      console.log(e);
    }
  }
});

app.post("/web-data", async (req, res) => {
  const { queryId, products = [], totalPrice } = req.body;
  try {
    await bot.answerWebAppQuery(queryId, {
      type: "article",
      id: queryId,
      title: "–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞",
      input_message_content: {
        message_text: ` –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π, –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞ —Å—É–º–º—É ${totalPrice}, ${products
          .map((item) => item.title)
          .join(", ")}`,
      },
    });
    return res.status(200).json({});
  } catch (e) {
    return res.status(500).json({});
  }
});

// Function to show user's orders
function showMyOrders(chatId) {
  const userOrders = userData[chatId].orders || [];

  if (userOrders.length > 0) {
    const orderText = userOrders.map((order, index) => {
      return `${index + 1}. ${order.cake} - $${order.price}`;
    });

    bot.sendMessage(chatId, `–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n${orderText.join("\n")}`);
  } else {
    bot.sendMessage(chatId, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –∑–∞–∫–∞–∑–æ–≤.");
  }
}

// Function to suggest payment options
function suggestPayment(chatId) {
  bot.sendMessage(chatId, "–ü—Ä–æ—à—É –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
    reply_markup: {
      keyboard: [
        ["üí≥ –ß–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É", "üì± –ú–æ–±–∏–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂"],
        ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É"],
      ],
      resize_keyboard: true,
    },
  });
}

// Handle order confirmation
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;

  switch (messageText) {
    case "üõí –ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å":
      suggestPayment(chatId);
      break;
    case "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
      cancelOrder(chatId);
      break;
    default:
      // Handle other messages
      break;
  }
});

// Handle payment selection
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;

  switch (messageText) {
    case "üí≥ –ß–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É":
    case "üì± –ú–æ–±–∏–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂":
      processPayment(chatId, messageText);
      break;
    case "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É":
      cancelPayment(chatId);
      break;
    default:
      // Handle other messages
      break;
  }
});

// Function to confirm the order and initiate payment
function confirmOrder(chatId) {
  const selectedCake = userData[chatId].selectedCake;

  // Simulate successful payment
  const paymentSuccessful = Math.random() < 0.8; // 80% success rate

  if (paymentSuccessful) {
    // Save the order to user data
    userData[chatId].orders = userData[chatId].orders || [];
    userData[chatId].orders.push({
      cake: selectedCake.name,
      price: selectedCake.price,
    });

    // Send order details to the server API
    axios
      .post(serverApiUrl + "/orders", {
        chatId,
        orderDetails: `–¢–æ—Ä—Ç/–ü–∏—Ä–æ–≥: ${selectedCake.name}\n–¶–µ–Ω–∞: $${selectedCake.price}`,
      })
      .then((response) => {
        bot.sendMessage(
          chatId,
          "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç! –í—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ.",
          {
            reply_markup: {
              remove_keyboard: true, // Remove the custom keyboard
            },
          }
        );
      })
      .catch((error) => {
        bot.sendMessage(chatId, "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.");
      });
  } else {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }

  // Clear selected cake
  userData[chatId].selectedCake = null;
}

// Function to process payment
function processPayment(chatId, paymentOption) {
  const selectedCake = userData[chatId].selectedCake;

  // Simulate successful payment
  const paymentSuccessful = Math.random() < 0.8; // 80% success rate

  if (paymentSuccessful) {
    // Save the order to user data
    userData[chatId].orders = userData[chatId].orders || [];
    userData[chatId].orders.push({
      cake: selectedCake.name,
      price: selectedCake.price,
    });

    // Send order details to the server API
    axios
      .post(serverApiUrl + "/orders", {
        chatId,
        orderDetails: `–¢–æ—Ä—Ç/–ü–∏—Ä–æ–≥: ${selectedCake.name}\n–¶–µ–Ω–∞: $${selectedCake.price}\nPayment Option: ${paymentOption}`,
      })
      .then((response) => {
        bot.sendMessage(
          chatId,
          "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –º—ã —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è.",
          {
            reply_markup: {
              remove_keyboard: true, // Remove the custom keyboard
            },
          }
        );
      })
      .catch((error) => {
        bot.sendMessage(chatId, "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..");
      });
  } else {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }

  // Clear selected cake
  userData[chatId].selectedCake = null;
}

// Function to cancel the order
function cancelOrder(chatId) {
  userData[chatId].selectedCake = null;
  bot.sendMessage(chatId, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.");
}

// Function to cancel the payment
function cancelPayment(chatId) {
  userData[chatId].selectedCake = null;
  bot.sendMessage(chatId, "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
}

const PORT = 8000;

app.listen(PORT, () => console.log("server started on PORT " + PORT));
